{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PRINCE\\\\Desktop\\\\CandyCrushGame\\\\candy-crush-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport ScoreBoard from \"./component/ScoreBoard\";\nimport blueCandy from \"./images/blue-candy.png\";\nimport greenCandy from \"./images/green-candy.png\";\nimport orangeCandy from \"./images/orange-candy.png\";\nimport purpleCandy from \"./images/purple-candy.png\";\nimport redCandy from \"./images/red-candy.png\";\nimport yellowCandy from \"./images/yellow-candy.png\";\nimport blank from \"./images/blank.png\";\nimport background from './images/back.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 8;\nconst candyColors = [blueCandy, orangeCandy, purpleCandy, redCandy, yellowCandy, greenCandy];\n\nconst App = () => {\n  _s();\n\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null);\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n  const [scoreDisplay, setScoreDisplay] = useState(0);\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 4);\n        columnOfFour.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (notValid.includes(i)) continue;\n\n      if (rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 4);\n        rowOfFour.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 3);\n        columnOfThree.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64];\n      const isBlank = currentColorArrangement[i] === blank;\n      if (notValid.includes(i)) continue;\n\n      if (rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 3);\n        rowOfThree.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i <= 55; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n      const isFirstRow = firstRow.includes(i);\n\n      if (isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNumber = Math.floor(Math.random() * candyColors.length);\n        currentColorArrangement[i] = candyColors[randomNumber];\n      }\n\n      if (currentColorArrangement[i + width] === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i];\n        currentColorArrangement[i] = blank;\n      }\n    }\n  };\n\n  const dragStart = e => {\n    setSquareBeingDragged(e.target);\n  };\n\n  const dragDrop = e => {\n    setSquareBeingReplaced(e.target);\n  };\n\n  const dragEnd = () => {\n    const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute(\"data-id\"));\n    const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute(\"data-id\"));\n    currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute(\"src\");\n    currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute(\"src\");\n    const validMoves = [squareBeingDraggedId - 1, squareBeingDraggedId - width, squareBeingDraggedId + 1, squareBeingDraggedId + width];\n    const validMove = validMoves.includes(squareBeingReplacedId);\n    const isAColumnOfFour = checkForColumnOfFour();\n    const isARowOfFour = checkForRowOfFour();\n    const isAColumnOfThree = checkForColumnOfThree();\n    const isARowOfThree = checkForRowOfThree();\n\n    if (squareBeingReplacedId && validMove && (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)) {\n      setSquareBeingDragged(null);\n      setSquareBeingReplaced(null);\n    } else {\n      currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute(\"src\");\n      currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute(\"src\");\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }\n  };\n\n  const createBoard = () => {\n    const randomColorArrangement = [];\n\n    for (let i = 0; i < width * width; i++) {\n      const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n\n    setCurrentColorArrangement(randomColorArrangement);\n  };\n\n  useEffect(() => {\n    createBoard();\n  }, []);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFour();\n      checkForRowOfFour();\n      checkForColumnOfThree();\n      checkForRowOfThree();\n      moveIntoSquareBelow();\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }, 100);\n    return () => clearInterval(timer);\n  }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    style: {\n      backgroundImage: `url(${background})`,\n      backgroundRepeat: \"no-repeat\",\n      backgroundPosition: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: currentColorArrangement.map((candyColor, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: candyColor,\n        alt: candyColor,\n        \"data-id\": index,\n        draggable: true,\n        onDragStart: dragStart,\n        onDragOver: e => e.preventDefault(),\n        onDragEnter: e => e.preventDefault(),\n        onDragLeave: e => e.preventDefault(),\n        onDrop: dragDrop,\n        onDragEnd: dragEnd\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScoreBoard, {\n      score: scoreDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"a6C/FUeBHOw5DCQEvzerpKvJb3M=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/PRINCE/Desktop/CandyCrushGame/candy-crush-react/src/App.js"],"names":["useEffect","useState","ScoreBoard","blueCandy","greenCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","blank","background","width","candyColors","App","currentColorArrangement","setCurrentColorArrangement","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","checkForColumnOfFour","i","columnOfFour","decidedColor","isBlank","every","square","score","forEach","checkForRowOfFour","rowOfFour","notValid","includes","checkForColumnOfThree","columnOfThree","checkForRowOfThree","rowOfThree","moveIntoSquareBelow","firstRow","isFirstRow","randomNumber","Math","floor","random","length","dragStart","e","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMoves","validMove","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","createBoard","randomColorArrangement","randomColor","push","timer","setInterval","clearInterval","backgroundImage","backgroundRepeat","backgroundPosition","map","candyColor","index","preventDefault"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport ScoreBoard from \"./component/ScoreBoard\";\nimport blueCandy from \"./images/blue-candy.png\";\nimport greenCandy from \"./images/green-candy.png\";\nimport orangeCandy from \"./images/orange-candy.png\";\nimport purpleCandy from \"./images/purple-candy.png\";\nimport redCandy from \"./images/red-candy.png\";\nimport yellowCandy from \"./images/yellow-candy.png\";\nimport blank from \"./images/blank.png\";\nimport background from './images/back.png'\n\nconst width = 8;\nconst candyColors = [\n  blueCandy,\n  orangeCandy,\n  purpleCandy,\n  redCandy,\n  yellowCandy,\n  greenCandy,\n];\n\nconst App = () => {\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null);\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n  const [scoreDisplay, setScoreDisplay] = useState(0);\n\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (\n        columnOfFour.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 4);\n        columnOfFour.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [\n        5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53,\n        54, 55, 62, 63, 64,\n      ];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (notValid.includes(i)) continue;\n\n      if (\n        rowOfFour.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 4);\n        rowOfFour.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (\n        columnOfThree.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 3);\n        columnOfThree.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2];\n      const decidedColor = currentColorArrangement[i];\n      const notValid = [\n        6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64,\n      ];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (notValid.includes(i)) continue;\n\n      if (\n        rowOfThree.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 3);\n        rowOfThree.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i <= 55; i++) {\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n      const isFirstRow = firstRow.includes(i);\n\n      if (isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNumber = Math.floor(Math.random() * candyColors.length);\n        currentColorArrangement[i] = candyColors[randomNumber];\n      }\n\n      if (currentColorArrangement[i + width] === blank) {\n        currentColorArrangement[i + width] = currentColorArrangement[i];\n        currentColorArrangement[i] = blank;\n      }\n    }\n  };\n\n  const dragStart = (e) => {\n    setSquareBeingDragged(e.target);\n  };\n  const dragDrop = (e) => {\n    setSquareBeingReplaced(e.target);\n  };\n  const dragEnd = () => {\n    const squareBeingDraggedId = parseInt(\n      squareBeingDragged.getAttribute(\"data-id\")\n    );\n    const squareBeingReplacedId = parseInt(\n      squareBeingReplaced.getAttribute(\"data-id\")\n    );\n\n    currentColorArrangement[squareBeingReplacedId] =\n      squareBeingDragged.getAttribute(\"src\");\n    currentColorArrangement[squareBeingDraggedId] =\n      squareBeingReplaced.getAttribute(\"src\");\n\n    const validMoves = [\n      squareBeingDraggedId - 1,\n      squareBeingDraggedId - width,\n      squareBeingDraggedId + 1,\n      squareBeingDraggedId + width,\n    ];\n\n    const validMove = validMoves.includes(squareBeingReplacedId);\n\n    const isAColumnOfFour = checkForColumnOfFour();\n    const isARowOfFour = checkForRowOfFour();\n    const isAColumnOfThree = checkForColumnOfThree();\n    const isARowOfThree = checkForRowOfThree();\n\n    if (\n      squareBeingReplacedId &&\n      validMove &&\n      (isARowOfThree || isARowOfFour || isAColumnOfFour || isAColumnOfThree)\n    ) {\n      setSquareBeingDragged(null);\n      setSquareBeingReplaced(null);\n    } else {\n      currentColorArrangement[squareBeingReplacedId] =\n        squareBeingReplaced.getAttribute(\"src\");\n      currentColorArrangement[squareBeingDraggedId] =\n        squareBeingDragged.getAttribute(\"src\");\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }\n  };\n\n  const createBoard = () => {\n    const randomColorArrangement = [];\n    for (let i = 0; i < width * width; i++) {\n      const randomColor =\n        candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n    setCurrentColorArrangement(randomColorArrangement);\n  };\n\n  useEffect(() => {\n    createBoard();\n  }, []);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFour();\n      checkForRowOfFour();\n      checkForColumnOfThree();\n      checkForRowOfThree();\n      moveIntoSquareBelow();\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }, 100);\n    return () => clearInterval(timer);\n  }, [\n    checkForColumnOfFour,\n    checkForRowOfFour,\n    checkForColumnOfThree,\n    checkForRowOfThree,\n    moveIntoSquareBelow,\n    currentColorArrangement,\n  ]);\n\n  return (\n    <div\n      className=\"app\"\n      style={{\n        backgroundImage: `url(${background})`,\n        backgroundRepeat: \"no-repeat\",\n        backgroundPosition:\"center\"\n      }}\n    >\n      <div className=\"game\">\n        {currentColorArrangement.map((candyColor, index) => (\n          <img\n            key={index}\n            src={candyColor}\n            alt={candyColor}\n            data-id={index}\n            draggable={true}\n            onDragStart={dragStart}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDrop={dragDrop}\n            onDragEnd={dragEnd}\n          />\n        ))}\n      </div>\n      <ScoreBoard score={scoreDisplay} />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}