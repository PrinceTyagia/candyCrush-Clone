{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PRINCE\\\\Desktop\\\\CandyCrushGame\\\\candy-crush-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst width = 8;\nconst candyColors = [\"blue\", \"green\", \"orange\", \"purple\", \"red\", \"yellow\"];\n\nconst App = () => {\n  _s();\n\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n\n  const createBoard = () => {\n    const randomColorArrangement = [];\n\n    for (let i = 0; i < width * width; i++) {\n      const randomColor = candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n\n    setCurrentColorArrangement(randomColorArrangement);\n  };\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank)) {\n        setScoreDisplay(score => score + 3);\n        columnOfThree.forEach(square => currentColorArrangement[square] = blank);\n        return true;\n      }\n    }\n  };\n\n  useEffect(() => {\n    createBoard();\n  }, []); // console.log(currentColorArrangement);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfThree();\n      checkForRowOfThree();\n      moveIntoSquareBelow();\n      setCurrentColorArrangement([...currentColorArrangement]);\n    }, 100);\n    return () => clearInterval(timer);\n  }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: currentColorArrangement.map((candyColor, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          background: candyColor\n        },\n        src: candyColor,\n        alt: candyColor\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"uoaHbVJS2NtlYqhXtmTeW0LXKPg=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/PRINCE/Desktop/CandyCrushGame/candy-crush-react/src/App.js"],"names":["useState","useEffect","width","candyColors","App","currentColorArrangement","setCurrentColorArrangement","createBoard","randomColorArrangement","i","randomColor","Math","floor","random","length","push","checkForColumnOfThree","columnOfThree","decidedColor","isBlank","blank","every","square","setScoreDisplay","score","forEach","timer","setInterval","checkForRowOfThree","moveIntoSquareBelow","clearInterval","checkForColumnOfFour","checkForRowOfFour","map","candyColor","index","background"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst width = 8;\nconst candyColors = [\"blue\", \"green\", \"orange\", \"purple\", \"red\", \"yellow\"];\n\nconst App = () => {\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([]);\n\n  const createBoard = () => {\n    const randomColorArrangement = [];\n    for (let i = 0; i < width * width; i++) {\n      const randomColor =\n        candyColors[Math.floor(Math.random() * candyColors.length)];\n      randomColorArrangement.push(randomColor);\n    }\n    setCurrentColorArrangement(randomColorArrangement);\n  };\n\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2];\n      const decidedColor = currentColorArrangement[i];\n      const isBlank = currentColorArrangement[i] === blank;\n\n      if (\n        columnOfThree.every(\n          (square) =>\n            currentColorArrangement[square] === decidedColor && !isBlank\n        )\n      ) {\n        setScoreDisplay((score) => score + 3);\n        columnOfThree.forEach(\n          (square) => (currentColorArrangement[square] = blank)\n        );\n        return true;\n      }\n    }\n  };\n\n  useEffect(() => {\n    createBoard();\n  }, []);\n  // console.log(currentColorArrangement);\n\n  useEffect(() => {\n        const timer = setInterval(() => {\n           \n            checkForColumnOfThree()\n            checkForRowOfThree()\n            moveIntoSquareBelow()\n            setCurrentColorArrangement([...currentColorArrangement])\n        }, 100)\n        return () => clearInterval(timer)\n    }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement])\n\n\n  \n\n\n  return (\n    <div className=\"app\">\n      <div className=\"game\">\n        {currentColorArrangement.map((candyColor, index) => (\n          <img\n            key={index}\n            style={{ background: candyColor }}\n            src={candyColor}\n            alt={candyColor}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}